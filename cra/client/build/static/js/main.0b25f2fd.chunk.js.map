{"version":3,"sources":["App.js","index.js"],"names":["spotifyApi","SpotifyWebApi","options","decodeEntities","transform","node","index","type","name","convertNodeToElement","App","token","getHashParams","access_token","setAccessToken","state","previousSong","error","result","loggedIn","nowPlaying","albumArt","accessToken","process","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","artist","song","getMyCurrentPlaybackState","then","response","item","artists","setState","album","images","url","length","replace","toLowerCase","indexOf","ind","slice","axios","get","res","lyricsURL","data","hits","headers","lyrics","wordInSong","html","splittedURL","split","lastIndexOf","includes","parse","querySelector","catch","err","console","log","className","id","onClick","getNowPlaying","href","this","ref","imgRef","crossOrigin","src","style","height","ReactHtmlParser","Component","ReactDOM","render","document","getElementById"],"mappings":"sQAWMA,EAAa,I,OAAIC,GAGjBC,EAAU,CACdC,gBAAgB,EAChBC,UAUF,SAASA,EAAUC,EAAMC,GAKvB,GAAkB,QAAdD,EAAKE,MAAgC,MAAdF,EAAKG,KAE9B,OADAH,EAAKG,KAAO,MACLC,+BAAqBJ,EAAMC,EAAOF,K,IA0P9BM,E,YArPb,aAAe,IAAD,sBAEZ,IACMC,GAFN,+CACoBC,gBACCC,aAHT,OAKRF,GACFX,EAAWc,eAAeH,GAG5B,EAAKI,MAAQ,CACXC,aAAc,GACdC,MAAO,GACPC,OAAQ,GACRC,WAAUR,EACVS,WAAY,CAAEZ,KAAM,cAAea,SAAU,IAC7CC,YAAY,aAAD,OACTC,mEADS,0BAGTA,yFAHS,yBAIMA,qEAnBP,E,0HAgCZ,IACIC,EADAC,EAAa,GAEfC,EAAI,uBACJC,EAAIC,OAAOC,SAASC,KAAKC,UAAU,GAErC,IADAP,EAAIE,EAAEM,KAAKL,GACJH,GACLC,EAAWD,EAAE,IAAMS,mBAAmBT,EAAE,IACxCA,EAAIE,EAAEM,KAAKL,GAEb,OAAOF,I,sCAGQ,IAAD,OAEVS,EAAS,GACTC,EAAO,GAGXnC,EACGoC,4BACAC,MAAK,SAAAC,GACHJ,EAASI,EAASC,KAAKC,QAAQ,GAAGhC,KAAQ2B,EAAOG,EAASC,KAAK/B,KAEhE,EAAKiC,SAAS,CACZrB,WAAY,CACVc,OAAQI,EAASC,KAAKC,QAAQ,GAAGhC,KACjCA,KAAM8B,EAASC,KAAK/B,KACpBa,SAAUiB,EAASC,KAAKG,MAAMC,OAAO,GAAGC,IACxC3B,MAAO,SAIZoB,MAAK,SAAAC,GAcJ,GAbIJ,EAAOW,OAAS,IAIlBX,GAFAA,EAASA,EAAOY,QAAQ,0BAAsB,KAE9BA,QAAQ,OAAQ,OAAOC,gBAId,IAAvBZ,EAAKa,QAAQ,OAEfb,EAAOA,EAAKJ,UAAU,EAAGI,EAAKa,QAAQ,KAAO,KAGpB,IAAvBb,EAAKa,QAAQ,OAAsC,IAAvBb,EAAKa,QAAQ,KAAa,CAExD,IAA2B,IAAvBb,EAAKa,QAAQ,KAAa,CAC5B,IAAIC,EAAMd,EAAKa,QAAQ,KAErBb,EADoB,MAAlBA,EAAKc,EAAM,GACNd,EAAKe,MAAM,EAAGf,EAAKa,QAAQ,KAAO,GAElCb,EAAKe,MAAM,EAAGf,EAAKa,QAAQ,KAAO,GAI7C,IAA2B,IAAvBb,EAAKa,QAAQ,MACC,MAAZb,EAAK,GAAY,CAEnB,IAAIc,EAAMd,EAAKa,QAAQ,KAErBb,EADoB,MAAlBA,EAAKc,EAAM,GACNd,EAAKe,MAAM,EAAGf,EAAKa,QAAQ,KAAO,GAElCb,EAAKe,MAAM,EAAGf,EAAKa,QAAQ,KAAO,IAOjDb,EAAOA,EAAKW,QAAQ,6BAAyB,IAI3C,EAAK/B,MAAMC,aAAa+B,gBAAkBZ,EAAKY,eACnB,KAA5B,EAAKhC,MAAMC,eAGXmB,EAAOA,EAAKW,QAAQ,OAAQ,OAAOC,cAEnCI,IACGC,IADH,0CAEuClB,EAFvC,cAEmDC,EAFnD,sBAGMZ,mEAHN,0BAKMA,yFALN,yBAMqBA,qEAElBc,MAAK,SAAAgB,GACJ,IAAIC,EAAYD,EAAIE,KAAKjB,SAASkB,KAAK,GAAGtC,OAAO0B,IAEjDO,IACGC,IAAI,uCAAyCE,EAAW,CACvDG,QAAS,CACP,8BAA+B,IAC/B,+BACE,oDAGLpB,MAAK,SAAAgB,GACJ,IACIK,EACApD,EACAqD,EAHEC,EAAOP,EAAIE,KAIbM,EAAcP,EAAUQ,MAAM,MAEP,IAAvB3B,EAAKa,QAAQ,MAEf1C,EAAQ6B,EAAK4B,YAAY,KACzBJ,EAAaxB,EAAKe,MAAM5C,EAAQ,GAAGwC,QAAQ,WAAY,MAEvDxC,EAAQ6B,EAAKU,OAAS,EACtBc,EAAaxB,EAAKe,MAAM,EAAG5C,GAAOwC,QAAQ,WAAY,KAQtDY,EAJGG,EAAYG,SAASL,GAIfM,gBAAML,GAAMM,cAAc,WAH7B,kCAMR,EAAKzB,SACH,CACEvB,OAAQwC,EACR1C,aAAcmB,EAAKW,QAAQ,OAAQ,KACnC7B,MAAO,KAET,yBASbkD,OAAM,SAAAC,GACLC,QAAQC,IAAI,UAAYF,GACxB,EAAK3B,SAAS,CACZxB,MAAOmD,S,+BAKL,IAAD,OACP,OACE,yBAAKG,UAAU,OACb,yBAAKA,UAAU,UAAUC,GAAG,OAC1B,yBAAKD,UAAU,aACb,4BAAQE,QAAS,kBAAM,EAAKC,kBAC1B,uBAAGC,KAAK,qDAAR,sBAIHC,KAAK7D,MAAMK,WAAWc,QACrB,yBAAKqC,UAAU,cACb,yBAAKA,UAAU,eACb,8CAGF,yBAAKA,UAAU,oBACb,yBACEM,IAAK,SAAAxE,GACH,EAAKyE,OAASzE,GAEhB0E,YAAY,YACZC,IAAKJ,KAAK7D,MAAMK,WAAWC,SAC3B4D,MAAO,CAAEC,OAAQ,QAIrB,yBAAKX,UAAU,mBACb,wBAAIA,UAAU,sBACXK,KAAK7D,MAAMK,WAAWc,QAEzB,wBAAIqC,UAAU,mBACXK,KAAK7D,MAAMK,WAAWZ,QAM9BoE,KAAK7D,MAAME,OACV,yBAAKsD,UAAU,aAAf,sFAMDK,KAAK7D,MAAMI,UACV,yBAAKoD,UAAU,qBACb,4BAAQE,QAAS,kBAAM,EAAKC,kBAA5B,uBAON,yBAAKH,UAAU,UAAUC,GAAG,UACzBI,KAAK7D,MAAMG,QACV,yBAAKqD,UAAU,cACZY,IAAgBP,KAAK7D,MAAMG,OAAQhB,U,GA7OhCkF,aChClBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.0b25f2fd.chunk.js","sourcesContent":["/* eslint-disable */\n\nimport React, { Component } from \"react\";\nimport ReactHtmlParser, { convertNodeToElement } from \"react-html-parser\";\nimport axios from \"axios\";\nimport { parse } from \"node-html-parser\";\nimport \"./App.css\";\n\n// import { getAverageRGB } from './image';\n\nimport SpotifyWebApi from \"spotify-web-api-js\";\nconst spotifyApi = new SpotifyWebApi();\n\n// parser option\nconst options = {\n  decodeEntities: true,\n  transform\n};\n\n/**\n * Transform <a> into <div>\n * @param  {number} index The index of the current node\n * @param  {obejct} node A DOM node\n * @return {function} The function that takes params and\n * current funstion to transform all a tags to divs\n */\nfunction transform(node, index) {\n  /* A node can be modified and passed to the convertNodeToElement \n    function which will continue to render it and it's children\n  */\n\n  if (node.type === \"tag\" && node.name === \"a\") {\n    node.name = \"div\";\n    return convertNodeToElement(node, index, transform);\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    const token = params.access_token;\n\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n\n    this.state = {\n      previousSong: \"\",\n      error: \"\",\n      result: \"\",\n      loggedIn: token ? true : false,\n      nowPlaying: { name: \"Not Checked\", albumArt: \"\" },\n      accessToken: `client_id=${\n        process.env.REACT_APP_GENIUS_API_CLIENT_KEY\n      }&client_secret=${\n        process.env.REACT_APP_GENIUS_API_CLIENT_SECRET\n      }&access_token=${process.env.REACT_APP_ACCESS_TOKEN}`\n    };\n  }\n\n  componentDidMount() {\n    /* Auto calls for current song */\n    // let interval = setInterval(() => {\n    //   this.getNowPlaying()\n    //   console.log(\"waiting for the next call.\");\n    // }, 10000);\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n      r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    e = r.exec(q);\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n    return hashParams;\n  }\n\n  getNowPlaying() {\n\n    let artist = \"\";\n    let song = \"\";\n\n    //getting current song\n    spotifyApi\n      .getMyCurrentPlaybackState()\n      .then(response => {\n        (artist = response.item.artists[0].name), (song = response.item.name);\n\n        this.setState({\n          nowPlaying: {\n            artist: response.item.artists[0].name,\n            name: response.item.name,\n            albumArt: response.item.album.images[0].url,\n            error: \"\"\n          }\n        });\n      })\n      .then(response => {\n        if (artist.length > 1) {\n          // removing special characters\n          artist = artist.replace(/[\\/\\\\#+$✝~%*<>{}]/g, \"\");\n          // replacing artist spaces with %20\n          artist = artist.replace(/\\s+/g, \"%20\").toLowerCase();\n        }\n\n        // make different requests if sees - in the name; had to remove it\n        if (song.indexOf(\"-\") !== -1) {\n          // cutting string\n          song = song.substring(0, song.indexOf(\"-\") - 1);\n        }\n\n        if (song.indexOf(\"(\") !== -1 || song.indexOf(\"/\") !== -1) {\n          // cutting string\n          if (song.indexOf(\"/\") !== -1) {\n            let ind = song.indexOf(\"/\"); //saving index\n            if (song[ind - 1] === \" \") {\n              song = song.slice(0, song.indexOf(\"/\") - 1); //cutting if there is a space\n            } else {\n              song = song.slice(0, song.indexOf(\"/\") + 1); //cutting without a space\n            }\n          }\n\n          if (song.indexOf(\"(\") !== -1) {\n            if (song[0] !== \"(\") {\n              //if first element is not '('\n              let ind = song.indexOf(\"(\"); //saving index\n              if (song[ind - 1] === \" \") {\n                song = song.slice(0, song.indexOf(\"(\") - 1); //cutting if there is a space\n              } else {\n                song = song.slice(0, song.indexOf(\"(\") + 1); //cutting without a space\n              }\n            }\n          }\n        }\n\n        // if first element is '(' or any other\n        song = song.replace(/[\\/\\\\#+$✝~%*<>{}().]/g, \"\");\n\n        // CONDITION for interval to stop sending requests to genius\n        if (\n          this.state.previousSong.toLowerCase() !== song.toLowerCase() ||\n          this.state.previousSong === \"\"\n        ) {\n          // replacing song spaces with %20\n          song = song.replace(/\\s+/g, \"%20\").toLowerCase();\n\n          axios\n            .get(\n              `https://api.genius.com/search?q=${artist}%20${song}&client_id=${\n                process.env.REACT_APP_GENIUS_API_CLIENT_KEY\n              }&client_secret=${\n                process.env.REACT_APP_GENIUS_API_CLIENT_SECRET\n              }&access_token=${process.env.REACT_APP_ACCESS_TOKEN}`\n            )\n            .then(res => {\n              let lyricsURL = res.data.response.hits[0].result.url;\n\n              axios\n                .get(`https://cors-anywhere.herokuapp.com/` + lyricsURL, {\n                  headers: {\n                    \"Access-Control-Allow-Origin\": \"*\",\n                    \"Access-Control-Allow-Headers\":\n                      \"Origin, X-Requested-With, Content-Type, Accept\"\n                  }\n                })\n                .then(res => {\n                  const html = res.data;\n                  let lyrics;\n                  let index;\n                  let wordInSong;\n                  let splittedURL = lyricsURL.split(\"-\"); // making an array from url\n\n                  if (song.indexOf(\"%\") !== -1) {\n                    // true\n                    index = song.lastIndexOf(\"%\");\n                    wordInSong = song.slice(index + 3).replace(/[\\/\\\\']/g, \"\");\n                  } else {\n                    index = song.length + 1;\n                    wordInSong = song.slice(0, index).replace(/[\\/\\\\']/g, \"\");\n                  }\n\n                  // checking if responce url contains a word from current sing\n                  if (!splittedURL.includes(wordInSong)) {\n                    lyrics = `Sorry, couldn't find any lyrics`;\n                  } else {\n                    // getting lyrics from the responce html\n                    lyrics = parse(html).querySelector(\".lyrics\");\n                  }\n\n                  this.setState(\n                    {\n                      result: lyrics,\n                      previousSong: song.replace(/%20/g, \" \"),\n                      error: \"\"\n                    },\n                    () => {\n                      // console.log('ref ', this.imgRef)\n                      // let result = getAverageRGB(this.imgRef)\n                    }\n                  );\n                });\n            });\n        }\n      })\n      .catch(err => {\n        console.log(\"ERROR: \" + err);\n        this.setState({\n          error: err\n        });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-Row\" id=\"top\">\n          <div className=\"App-Login\">\n            <button onClick={() => this.getNowPlaying()}>\n              <a href=\"https://spotify-genius-lyrics.herokuapp.com/login\">Login to Spotify</a>\n            </button>\n          </div>\n\n          {this.state.nowPlaying.artist && (\n            <div className=\"App-Artist\">\n              <div className=\"App-Playing\">\n                <div>Now Playing:</div>\n              </div>\n\n              <div className=\"App-Artist-Cover\">\n                <img\n                  ref={node => {\n                    this.imgRef = node;\n                  }}\n                  crossOrigin=\"anonymous\"\n                  src={this.state.nowPlaying.albumArt}\n                  style={{ height: 250 }}\n                />\n              </div>\n\n              <div className=\"App-Artist-Info\">\n                <h2 className=\"App-Artist-Current\">\n                  {this.state.nowPlaying.artist}\n                </h2>\n                <h4 className=\"App-Artist-Song\">\n                  {this.state.nowPlaying.name}\n                </h4>\n              </div>\n            </div>\n          )}\n\n          {this.state.error && (\n            <div className=\"App-Error\">\n              Session has expired. Please login to your Spotify account and\n              start playing a song\n            </div>\n          )}\n\n          {this.state.loggedIn && (\n            <div className=\"App-Check-Current\">\n              <button onClick={() => this.getNowPlaying()}>\n                Check Now Playing\n              </button>\n            </div>\n          )}\n        </div>\n\n        <div className=\"App-Row\" id=\"bottom\">\n          {this.state.result && (\n            <div className=\"App-Lyrics\">\n              {ReactHtmlParser(this.state.result, options)}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}
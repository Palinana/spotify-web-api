{"version":3,"sources":["App.js","index.js"],"names":["spotifyApi","SpotifyWebApi","options","decodeEntities","transform","node","index","type","name","convertNodeToElement","App","token","getHashParams","access_token","setAccessToken","state","previousSong","error","result","loggedIn","nowPlaying","albumArt","accessToken","process","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","artist","song","getMyCurrentPlaybackState","then","response","item","artists","setState","album","images","url","length","replace","toLowerCase","indexOf","ind","slice","axios","get","res","lyricsURL","data","hits","headers","lyrics","wordInSong","html","splittedURL","split","lastIndexOf","includes","parse","querySelector","catch","err","console","log","className","id","onClick","getNowPlaying","href","this","ref","imgRef","crossOrigin","src","style","height","ReactHtmlParser","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.24130a50.chunk.js","sourcesContent":["/* eslint-disable */\n\nimport React, { Component } from 'react';\nimport ReactHtmlParser,{ convertNodeToElement } from 'react-html-parser';\nimport axios from 'axios';\nimport { parse } from 'node-html-parser';\nimport './App.css';\n\n// import { getAverageRGB } from './image';\n\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\n// parser option\nconst options = {\n  decodeEntities: true,\n  transform\n};\n\n/**\n * Transform <a> into <div>\n * @param  {number} index The index of the current node\n * @param  {obejct} node A DOM node\n * @return {function} The function that takes params and \n * current funstion to transform all a tags to divs\n */\nfunction transform(node, index) {\n  /* A node can be modified and passed to the convertNodeToElement \n    function which will continue to render it and it's children\n  */ \n  if (node.type === \"tag\" && node.name === \"a\") {\n    node.name = \"div\";\n    return convertNodeToElement(node, index, transform);\n  }\n}\n\nclass App extends Component {\n  constructor(){\n    super();\n    const params = this.getHashParams();\n    const token = params.access_token;\n\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n\n    this.state = {\n      previousSong: '',\n      error: \"\",\n      result: \"\",\n      loggedIn: token ? true : false,\n      nowPlaying: { name: 'Not Checked', albumArt: '' },\n      accessToken: `client_id=${process.env.REACT_APP_GENIUS_API_CLIENT_KEY}&client_secret=${process.env.REACT_APP_GENIUS_API_CLIENT_SECRET}&access_token=${process.env.REACT_APP_ACCESS_TOKEN}`\n    }\n  }\n  \n  componentDidMount() {\n    /* Auto calls for current song */\n\n    // let interval = setInterval(() => {\n    //   this.getNowPlaying()\n    //   console.log(\"waiting for the next call.\");\n    // }, 10000);\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    e = r.exec(q)\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n    return hashParams;\n  }\n\n  getNowPlaying(){\n    let artist = '';\n    let song = '';\n\n    //getting current song\n    spotifyApi.getMyCurrentPlaybackState()\n      .then((response) => {\n        artist = response.item.artists[0].name, \n        song = response.item.name\n\n        this.setState({\n          nowPlaying: {\n              artist: response.item.artists[0].name, \n              name: response.item.name, \n              albumArt: response.item.album.images[0].url,\n              error: \"\"\n            }\n        });\n      }) \n      .then((response) => {      \n          if(artist.length > 1) {\n            // removing special characters\n            artist = artist.replace(/[\\/\\\\#+$✝~%*<>{}]/g, '');\n            // replacing artist spaces with %20\n            artist = artist.replace(/\\s+/g, '%20').toLowerCase();\n          }\n      \n          // make different requests if sees - in the name; had to remove it\n          if(song.indexOf(\"-\") !== -1){\n            // cutting string\n            song = song.substring(0, song.indexOf(\"-\") - 1);\n          }\n\n          if (song.indexOf(\"(\") !== -1 || song.indexOf(\"/\") !== -1 ) {\n            // cutting string \n            if (song.indexOf(\"/\") !== -1) {            \n              let ind = song.indexOf(\"/\"); //saving index\n              if (song[ind-1] === ' ') {\n                song = song.slice(0, song.indexOf(\"/\")-1); //cutting if there is a space\n              }\n              else {\n                song = song.slice(0, song.indexOf(\"/\")+1) //cutting without a space\n              };\n            }\n\n            if (song.indexOf(\"(\") !== -1){\n              if (song[0] !== \"(\") { //if first element is not '('\n                let ind = song.indexOf(\"(\"); //saving index\n                if (song[ind-1] === ' ') {\n                  song = song.slice(0, song.indexOf(\"(\")-1); //cutting if there is a space\n                }\n                else {\n                  song = song.slice(0, song.indexOf(\"(\")+1) //cutting without a space\n                };\n              }\n            }\n          }\n        \n          // if first element is '(' or any other\n          song = song.replace(/[\\/\\\\#+$✝~%*<>{}().]/g, '');\n\n          // CONDITION for interval to stop sending requests to genius\n          if (this.state.previousSong.toLowerCase() !== song.toLowerCase() || \n            this.state.previousSong === '') { \n\n            // replacing song spaces with %20\n            song = song.replace(/\\s+/g, '%20').toLowerCase();\n\n            axios.get(`https://api.genius.com/search?q=${artist}%20${song}&client_id=${process.env.REACT_APP_GENIUS_API_CLIENT_KEY}&client_secret=${process.env.REACT_APP_GENIUS_API_CLIENT_SECRET}&access_token=${process.env.REACT_APP_ACCESS_TOKEN}`)\n              .then((res) =>{\n                let lyricsURL = res.data.response.hits[0].result.url;\n\n                axios.get(`https://cors-anywhere.herokuapp.com/` + lyricsURL, {\n                  headers: {\n                    'Access-Control-Allow-Origin' : '*',\n                    'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'\n                  }\n                })\n                  .then((res) => {\n                    const html = res.data;\n                    let lyrics;\n                    let index;\n                    let wordInSong;\n                    let splittedURL = lyricsURL.split(\"-\"); // making an array from url \n\n                    if(song.indexOf(\"%\") !== -1) { // true\n                      index = song.lastIndexOf(\"%\");\n                      wordInSong = song.slice(index+3).replace(/[\\/\\\\']/g, '');\n                    }\n                    else {\n                      index = song.length+1;\n                      wordInSong = song.slice(0, index).replace(/[\\/\\\\']/g, '');\n                    }\n\n                    // checking if responce url contains a word from current sing \n                    if(!splittedURL.includes(wordInSong)){\n                      lyrics = `Sorry, couldn't find any lyrics`;\n                    }\n                    else {\n                      // getting lyrics from the responce html\n                      lyrics = parse(html).querySelector('.lyrics');\n                    }\n\n                    this.setState({\n                      result: lyrics, \n                      previousSong: song.replace(/%20/g, \" \"), \n                      error: \"\" }, () => {\n                      // console.log('ref ', this.imgRef)\n                      // let result = getAverageRGB(this.imgRef)\n                    })\n                  })      \n          })\n        }\n      })\n      .catch(err => {\n        console.log(\"ERROR: \" + err);\n        this.setState({\n          error: err\n        })\n      })\n  }\n\n  render() {\n   \n    return (\n      <div className=\"App\">\n        <div className=\"App-Row\" id=\"top\">\n          <div className=\"App-Login\">\n            <button onClick={() => this.getNowPlaying()}>\n              <a href='http://localhost:8888'> \n                Login to Spotify \n              </a>\n            </button>\n          </div>\n          \n          { this.state.nowPlaying.artist && (\n            <div className=\"App-Artist\">\n              <div className=\"App-Playing\">\n                <div>Now Playing:</div> \n              </div>\n\n              <div className=\"App-Artist-Cover\">\n                <img ref={node => {this.imgRef = node}} crossOrigin=\"anonymous\" src={this.state.nowPlaying.albumArt} style={{ height: 250 }}/>\n              </div>\n              \n              <div className=\"App-Artist-Info\">\n                <h2 className=\"App-Artist-Current\">{ this.state.nowPlaying.artist }</h2>\n                <h4 className=\"App-Artist-Song\">{ this.state.nowPlaying.name }</h4>\n              </div>\n            </div>\n          )}\n          \n          {\n            this.state.error && <div className=\"App-Error\">Session has expired. Please login to your Spotify account and start playing a song</div>\n          }\n          \n          { this.state.loggedIn &&\n            <div className=\"App-Check-Current\">\n              <button onClick={() => this.getNowPlaying()}>\n                Check Now Playing\n              </button>\n            </div>\n          }\n        </div>\n        \n        <div className=\"App-Row\" id=\"bottom\">\n          {\n            this.state.result && <div className=\"App-Lyrics\">{ ReactHtmlParser(this.state.result, options) }</div>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}